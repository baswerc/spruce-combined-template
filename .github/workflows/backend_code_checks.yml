name: Backend Code Checks
on:
  workflow_dispatch:
permissions:
  contents: read
  checks: write
defaults:
  run:
    working-directory: ./backend
jobs:
  linting_and_security:
    name: Linting and Security
    env:
      CI: true
      TERM: xterm-256color
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler-cache: true

      - name: Run bundle install
        run:  bundle install

      - name: Run bundle-audit (SCA)
        run:  bundle exec bundle-audit check --update

      - name: Run Rubocop (Style Checker)
        run:  bundle exec rubocop

      - name: Run Brakeman (Static Analysis)
        run:  bundle exec brakeman --confidence-level=2 --format text --color
  tests:
    name: Test
    env:
      CI: true
      RAILS_ENV: test
      TERM: xterm-256color
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Directory
        run: |
          pwd

      - name: Setup Environment
        run: |
          echo "ACTIONS_USER_ID=$(id -u)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          build-args: |
            userid=${{ env.ACTIONS_USER_ID }}
          context: ./backend/.
          target: builder
          push: false
          load: true
          tags: spruce-challenge-api
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Database
        run: |
          RAILS_ENV=test docker-compose -f docker-compose-test.yml run spruce-challenge-api bin/rails db:reset

      - name: Run Specs
        run: |
          docker-compose -f docker-compose-test.yml run spruce-challenge-api bundle exec rspec spec

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Coverage Report
          path: backend/coverage

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Test Results
          path: backend/log/*.xml
          if-no-files-found: ignore

  publish_results:
    name: Publish Test Results and Coverage
    if: always()
    needs: [tests]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v3

      - name: Fix up coverage report to work with coverage-check-action
        run: sed -i 's/"line"/"covered_percent"/g' 'Coverage Report/.last_run.json'

      - name: Publish Coverage Report
        uses: devmasx/coverage-check-action@v1.2.0
        if: hashFiles('Coverage Report/.last_run.json') != ''
        with:
          type: simplecov
          result_path: backend/Coverage Report/.last_run.json
          min_coverage: 90
          token: ${{ secrets.GITHUB_TOKEN }}